package rocks.zipcode;
import org.junit.Test;
import java.util.Iterator;
import java.util.Spliterators;
import java.util.Vector;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;


public class TestVector {
    private Vector v;
    private Vector v_clone;

    @Before
    public void setUp() throws Exception {
        v = new Vector();
        v_clone = new Vector();
        v.add("Hello world");
        v.add("Charlotte");
        v.add("Loves Java");
    }

    @After
    public void tearDown() throws Exception {
    }

    @Test
    public void VectorAddTest() {
        v.add("And JavaScript");
        assertTrue(v.contains("And JavaScript"));
    }

    @Test
    public void VectorClearTest() {
        v.clear();
        assertTrue(v.isEmpty());
    }

    @Test
    public void VectorCloneTest() {
        v_clone = (Vector) v.clone();
        assertEquals(true, v.equals(v_clone)); // a clone of v versus v_clone
    }

    @Test
    public void VectorGetTest() {
        Vector v = new Vector();
        v.add(1);
        v.add(2);
        v.add("Geeks");
        v.add("forGeeks");
        v.add(4);
        assertEquals("Geeks", v.get(2));
    }
    @Test
    public void VectorLastIndexTest(){ // Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element.
        Vector v = new Vector();
        v.add(1);
        v.add(2);
        v.add(2);
        v.add("Geeks");
        v.add("forGeeks");
        v.add(4);
        assertEquals(2, v.lastIndexOf(2));
    }


}
